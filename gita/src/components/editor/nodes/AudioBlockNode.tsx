import { EditorConfig, LexicalNode, NodeKey, SerializedLexicalNode, Spread, DecoratorNode } from 'lexical';


import { jsxDEV } from "react/jsx-dev-runtime";

import AudioBlockComponent from '../AudioBlockComponent';

// Based on jules_wip: blockId is the node's own key and not part of the external payload for creation.
export interface AudioBlockPayload {
  audioFilePath: string;
  recordingId: string;
  startTime: number;
}

export type SerializedAudioBlockNode = Spread<
  {
    audioFilePath: string;
    recordingId: string;
    startTime: number;
    blockId: NodeKey; // blockId is the NodeKey, used for serialization/deserialization as the key
    type: 'audio-block';
    version: 1;
  },
  SerializedLexicalNode
>;

export class AudioBlockNode extends DecoratorNode<React.ReactNode> {
  __audioFilePath: string;
  __recordingId: string;
  __startTime: number;
  // __blockId is not stored as a separate property if it's always this.getKey().
  // If it were needed for some reason before the node is attached, it could be passed,
  // but standard practice is to rely on getKey() once attached.

  static getType(): string {
    return 'audio-block';
  }

  static clone(node: AudioBlockNode): AudioBlockNode {
    return new AudioBlockNode(
      node.__audioFilePath,
      node.__recordingId,
      node.__startTime,
      node.__key // Pass the original key for a true clone
    );
  }

  constructor(
    audioFilePath: string,
    recordingId: string,
    startTime: number,
    key?: NodeKey
  ) {
    super(key);
    this.__audioFilePath = audioFilePath;
    this.__recordingId = recordingId;
    this.__startTime = startTime;
  }

  createDOM(config: EditorConfig): HTMLElement {
    const div = document.createElement('div');
    // Ensure this class matches what's in LexicalEditor's theme if specific styling is desired
    div.className = config.theme.audioBlock || 'editor-audio-block'; 
    return div;
  }

  updateDOM(): false {
    return false;
  }

  // Method to get the blockId (which is its Lexical key)
  // This is illustrative; typically, you'd just use .getKey() where needed.
  getBlockId(): NodeKey {
    return this.__key; // Or this.getKey()
  }

  static importJSON(serializedNode: SerializedAudioBlockNode): AudioBlockNode {
    // The blockId from JSON is used as the key for the new node.
    const node = new AudioBlockNode(
      serializedNode.audioFilePath,
      serializedNode.recordingId,
      serializedNode.startTime,
      serializedNode.blockId // Use blockId from JSON as the key for the new node
    );
    return node;
  }

  exportJSON(): SerializedAudioBlockNode {
    return {
      audioFilePath: this.__audioFilePath,
      recordingId: this.__recordingId,
      startTime: this.__startTime,
      blockId: this.getKey(), // Use the node's actual key for serialization
      type: 'audio-block',
      version: 1,
    };
  }

  decorate(): React.ReactNode {
    return (
      <AudioBlockComponent 
        audioFilePath={this.__audioFilePath}
        blockId={this.getKey()} // Pass the node's key as blockId to component
        startTime={this.__startTime}
        recordingId={this.__recordingId}
      />
    );
  }
}

export function $createAudioBlockNode(
  audioFilePath: string,
  recordingId: string,
  startTime: number
): AudioBlockNode {
  // blockId (NodeKey) is generated by Lexical automatically when the node is created.
  // We don't pass an explicit blockId string here.
  return new AudioBlockNode(audioFilePath, recordingId, startTime);
}

export function $isAudioBlockNode(
  node: LexicalNode | null | undefined
): node is AudioBlockNode {
  return node instanceof AudioBlockNode;
}
